// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "helloworld.pb.h"

//yunhe
#define BILLION 1000000000L
#include <stdlib.h>
#include <time.h>

#include <iostream>
#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

namespace {

const ::google::protobuf::Descriptor* HelloRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* intVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  intVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* doubleVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  doubleVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* circleVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  circleVal_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_helloworld_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_helloworld_2eproto() {
  protobuf_AddDesc_helloworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "helloworld.proto");
  GOOGLE_CHECK(file != NULL);
  HelloRequest_descriptor_ = file->message_type(0);
  static const int HelloRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, name_),
  };
  HelloRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HelloRequest_descriptor_,
      HelloRequest::default_instance_,
      HelloRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HelloRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, _is_default_instance_));
  HelloReply_descriptor_ = file->message_type(1);
  static const int HelloReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, message_),
  };
  HelloReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HelloReply_descriptor_,
      HelloReply::default_instance_,
      HelloReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(HelloReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _is_default_instance_));
  intVal_descriptor_ = file->message_type(2);
  static const int intVal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intVal, val_),
  };
  intVal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      intVal_descriptor_,
      intVal::default_instance_,
      intVal_offsets_,
      -1,
      -1,
      -1,
      sizeof(intVal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intVal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(intVal, _is_default_instance_));
  doubleVal_descriptor_ = file->message_type(3);
  static const int doubleVal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doubleVal, val_),
  };
  doubleVal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      doubleVal_descriptor_,
      doubleVal::default_instance_,
      doubleVal_offsets_,
      -1,
      -1,
      -1,
      sizeof(doubleVal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doubleVal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doubleVal, _is_default_instance_));
  circleVal_descriptor_ = file->message_type(4);
  static const int circleVal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(circleVal, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(circleVal, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(circleVal, color_),
  };
  circleVal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      circleVal_descriptor_,
      circleVal::default_instance_,
      circleVal_offsets_,
      -1,
      -1,
      -1,
      sizeof(circleVal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(circleVal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(circleVal, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_helloworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HelloRequest_descriptor_, &HelloRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HelloReply_descriptor_, &HelloReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      intVal_descriptor_, &intVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      doubleVal_descriptor_, &doubleVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      circleVal_descriptor_, &circleVal::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_helloworld_2eproto() {
  delete HelloRequest::default_instance_;
  delete HelloRequest_reflection_;
  delete HelloReply::default_instance_;
  delete HelloReply_reflection_;
  delete intVal::default_instance_;
  delete intVal_reflection_;
  delete doubleVal::default_instance_;
  delete doubleVal_reflection_;
  delete circleVal::default_instance_;
  delete circleVal_reflection_;
}

void protobuf_AddDesc_helloworld_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_helloworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020helloworld.proto\022\nhelloworld\"\034\n\014HelloR"
    "equest\022\014\n\004name\030\001 \001(\005\"\035\n\nHelloReply\022\017\n\007me"
    "ssage\030\001 \001(\005\"\025\n\006intVal\022\013\n\003val\030\001 \001(\005\"\030\n\tdo"
    "ubleVal\022\013\n\003Val\030\001 \001(\001\"5\n\tcircleVal\022\016\n\006cen"
    "ter\030\001 \001(\005\022\t\n\001r\030\002 \001(\001\022\r\n\005color\030\003 \001(\0102\357\001\n\007"
    "Greeter\022>\n\010SayHello\022\030.helloworld.HelloRe"
    "quest\032\026.helloworld.HelloReply\"\000\0222\n\006incOn"
    "e\022\022.helloworld.intVal\032\022.helloworld.intVa"
    "l\"\000\0226\n\004half\022\025.helloworld.doubleVal\032\025.hel"
    "loworld.doubleVal\"\000\0228\n\006expand\022\025.hellowor"
    "ld.circleVal\032\025.helloworld.circleVal\"\000B6\n"
    "\033io.grpc.examples.helloworldB\017HelloWorld"
    "ProtoP\001\242\002\003HLWb\006proto3", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "helloworld.proto", &protobuf_RegisterTypes);
  HelloRequest::default_instance_ = new HelloRequest();
  HelloReply::default_instance_ = new HelloReply();
  intVal::default_instance_ = new intVal();
  doubleVal::default_instance_ = new doubleVal();
  circleVal::default_instance_ = new circleVal();
  HelloRequest::default_instance_->InitAsDefaultInstance();
  HelloReply::default_instance_->InitAsDefaultInstance();
  intVal::default_instance_->InitAsDefaultInstance();
  doubleVal::default_instance_->InitAsDefaultInstance();
  circleVal::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_helloworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_helloworld_2eproto {
  StaticDescriptorInitializer_helloworld_2eproto() {
    protobuf_AddDesc_helloworld_2eproto();
  }
} static_descriptor_initializer_helloworld_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloRequest::HelloRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.HelloRequest)
}

void HelloRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HelloRequest::HelloRequest(const HelloRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.HelloRequest)
}

void HelloRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  name_ = 0;
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:helloworld.HelloRequest)
  SharedDtor();
}

void HelloRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelloRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloRequest_descriptor_;
}

const HelloRequest& HelloRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloworld_2eproto();
  return *default_instance_;
}

HelloRequest* HelloRequest::default_instance_ = NULL;

HelloRequest* HelloRequest::New(::google::protobuf::Arena* arena) const {
  HelloRequest* n = new HelloRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.HelloRequest)
  name_ = 0;
}

bool HelloRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.HelloRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 name = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.HelloRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.HelloRequest)
  return false;
#undef DO_
}

void HelloRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.HelloRequest)
  // optional int32 name = 1;
  if (this->name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:helloworld.HelloRequest)
}

::google::protobuf::uint8* HelloRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.HelloRequest)
  // optional int32 name = 1;
  if (this->name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:helloworld.HelloRequest)
  return target;
}

int HelloRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.HelloRequest)
  int total_size = 0;

  // optional int32 name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.HelloRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HelloRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HelloRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.HelloRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.HelloRequest)
    MergeFrom(*source);
  }
}

void HelloRequest::MergeFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.HelloRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name() != 0) {
    set_name(from.name());
  }
}

void HelloRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {

  return true;
}

void HelloRequest::Swap(HelloRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloRequest::InternalSwap(HelloRequest* other) {
  std::swap(name_, other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HelloRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloRequest_descriptor_;
  metadata.reflection = HelloRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloRequest

// optional int32 name = 1;
void HelloRequest::clear_name() {
  name_ = 0;
}
 ::google::protobuf::int32 HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.name)
  return name_;
}
 void HelloRequest::set_name(::google::protobuf::int32 value) {
  
  name_ = value;
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloReply::HelloReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.HelloReply)
}

void HelloReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HelloReply::HelloReply(const HelloReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.HelloReply)
}

void HelloReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  message_ = 0;
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:helloworld.HelloReply)
  SharedDtor();
}

void HelloReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelloReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloReply_descriptor_;
}

const HelloReply& HelloReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloworld_2eproto();
  return *default_instance_;
}

HelloReply* HelloReply::default_instance_ = NULL;

HelloReply* HelloReply::New(::google::protobuf::Arena* arena) const {
  HelloReply* n = new HelloReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.HelloReply)
  message_ = 0;
}

bool HelloReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.HelloReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 message = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.HelloReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.HelloReply)
  return false;
#undef DO_
}

void HelloReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.HelloReply)
  // optional int32 message = 1;
  if (this->message() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:helloworld.HelloReply)
}

::google::protobuf::uint8* HelloReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.HelloReply)
  // optional int32 message = 1;
  if (this->message() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:helloworld.HelloReply)
  return target;
}

int HelloReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.HelloReply)
  int total_size = 0;

  // optional int32 message = 1;
  if (this->message() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.HelloReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HelloReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HelloReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.HelloReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.HelloReply)
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.HelloReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message() != 0) {
    set_message(from.message());
  }
}

void HelloReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {

  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloReply::InternalSwap(HelloReply* other) {
  std::swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HelloReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloReply_descriptor_;
  metadata.reflection = HelloReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloReply

// optional int32 message = 1;
void HelloReply::clear_message() {
  message_ = 0;
}
 ::google::protobuf::int32 HelloReply::message() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.message)
  return message_;
}
 void HelloReply::set_message(::google::protobuf::int32 value) {
  
  message_ = value;
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int intVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

intVal::intVal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.intVal)
}

void intVal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

intVal::intVal(const intVal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.intVal)
}

void intVal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  val_ = 0;
}

intVal::~intVal() {
  // @@protoc_insertion_point(destructor:helloworld.intVal)
  SharedDtor();
}

void intVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void intVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* intVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return intVal_descriptor_;
}

const intVal& intVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloworld_2eproto();
  return *default_instance_;
}

intVal* intVal::default_instance_ = NULL;

intVal* intVal::New(::google::protobuf::Arena* arena) const {
  intVal* n = new intVal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void intVal::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.intVal)
  val_ = 0;
}

bool intVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.intVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.intVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.intVal)
  return false;
#undef DO_
}

void intVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.intVal)
  // optional int32 val = 1;
  
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->val(), output);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ int marshall func0 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_end:helloworld.intVal)
}

::google::protobuf::uint8* intVal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.intVal)
  // optional int32 val = 1;
 
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->val(), target);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ int marshall func1 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_to_array_end:helloworld.intVal)
  return target;
}

int intVal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.intVal)
  int total_size = 0;

  // optional int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->val());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void intVal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.intVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const intVal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const intVal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.intVal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.intVal)
    MergeFrom(*source);
  }
}

void intVal::MergeFrom(const intVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.intVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void intVal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.intVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void intVal::CopyFrom(const intVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.intVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool intVal::IsInitialized() const {

  return true;
}

void intVal::Swap(intVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void intVal::InternalSwap(intVal* other) {
  std::swap(val_, other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata intVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = intVal_descriptor_;
  metadata.reflection = intVal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// intVal

// optional int32 val = 1;
void intVal::clear_val() {
  val_ = 0;
}
 ::google::protobuf::int32 intVal::val() const {
  // @@protoc_insertion_point(field_get:helloworld.intVal.val)
  return val_;
}
 void intVal::set_val(::google::protobuf::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:helloworld.intVal.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int doubleVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

doubleVal::doubleVal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.doubleVal)
}

void doubleVal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

doubleVal::doubleVal(const doubleVal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.doubleVal)
}

void doubleVal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  val_ = 0;
}

doubleVal::~doubleVal() {
  // @@protoc_insertion_point(destructor:helloworld.doubleVal)
  SharedDtor();
}

void doubleVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void doubleVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doubleVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return doubleVal_descriptor_;
}

const doubleVal& doubleVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloworld_2eproto();
  return *default_instance_;
}

doubleVal* doubleVal::default_instance_ = NULL;

doubleVal* doubleVal::New(::google::protobuf::Arena* arena) const {
  doubleVal* n = new doubleVal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void doubleVal::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.doubleVal)
  val_ = 0;
}

bool doubleVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.doubleVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Val = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.doubleVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.doubleVal)
  return false;
#undef DO_
}

void doubleVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.doubleVal)
  // optional double Val = 1;
  
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->val(), output);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ double marshall func0 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_end:helloworld.doubleVal)
}

::google::protobuf::uint8* doubleVal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.doubleVal)
  // optional double Val = 1;
 
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->val(), target);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ double marshall func1 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_to_array_end:helloworld.doubleVal)
  return target;
}

int doubleVal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.doubleVal)
  int total_size = 0;

  // optional double Val = 1;
  if (this->val() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doubleVal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.doubleVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const doubleVal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const doubleVal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.doubleVal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.doubleVal)
    MergeFrom(*source);
  }
}

void doubleVal::MergeFrom(const doubleVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.doubleVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void doubleVal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.doubleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doubleVal::CopyFrom(const doubleVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.doubleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doubleVal::IsInitialized() const {

  return true;
}

void doubleVal::Swap(doubleVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void doubleVal::InternalSwap(doubleVal* other) {
  std::swap(val_, other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata doubleVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = doubleVal_descriptor_;
  metadata.reflection = doubleVal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// doubleVal

// optional double Val = 1;
void doubleVal::clear_val() {
  val_ = 0;
}
 double doubleVal::val() const {
  // @@protoc_insertion_point(field_get:helloworld.doubleVal.Val)
  return val_;
}
 void doubleVal::set_val(double value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:helloworld.doubleVal.Val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int circleVal::kCenterFieldNumber;
const int circleVal::kRFieldNumber;
const int circleVal::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

circleVal::circleVal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:helloworld.circleVal)
}

void circleVal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

circleVal::circleVal(const circleVal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:helloworld.circleVal)
}

void circleVal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  center_ = 0;
  r_ = 0;
  color_ = false;
}

circleVal::~circleVal() {
  // @@protoc_insertion_point(destructor:helloworld.circleVal)
  SharedDtor();
}

void circleVal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void circleVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* circleVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return circleVal_descriptor_;
}

const circleVal& circleVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloworld_2eproto();
  return *default_instance_;
}

circleVal* circleVal::default_instance_ = NULL;

circleVal* circleVal::New(::google::protobuf::Arena* arena) const {
  circleVal* n = new circleVal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void circleVal::Clear() {
// @@protoc_insertion_point(message_clear_start:helloworld.circleVal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(circleVal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<circleVal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, color_);

#undef ZR_HELPER_
#undef ZR_

}

bool circleVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:helloworld.circleVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 center = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_r;
        break;
      }

      // optional double r = 2;
      case 2: {
        if (tag == 17) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional bool color = 3;
      case 3: {
        if (tag == 24) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:helloworld.circleVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:helloworld.circleVal)
  return false;
#undef DO_
}

void circleVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:helloworld.circleVal)
  // optional int32 center = 1;
 
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->center(), output);
  }

  // optional double r = 2;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->r(), output);
  }

  // optional bool color = 3;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->color(), output);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ circle marshall func0 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_end:helloworld.circleVal)
}

::google::protobuf::uint8* circleVal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:helloworld.circleVal)
  // optional int32 center = 1;
  
  //yunhe
  uint64_t diff;
  struct timespec start0, end0;
  clock_gettime(CLOCK_MONOTONIC, &start0);
  
  if (this->center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->center(), target);
  }

  // optional double r = 2;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->r(), target);
  }

  // optional bool color = 3;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->color(), target);
  }

  clock_gettime(CLOCK_MONOTONIC, &end0);
  diff = BILLION * (end0.tv_sec - start0.tv_sec) + end0.tv_nsec - start0.tv_nsec;
  std::cout << "@@ circle marshall func1 diff = ";
  std::cout << diff;
  std::cout << " @@\n";
  // @@protoc_insertion_point(serialize_to_array_end:helloworld.circleVal)
  return target;
}

int circleVal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:helloworld.circleVal)
  int total_size = 0;

  // optional int32 center = 1;
  if (this->center() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center());
  }

  // optional double r = 2;
  if (this->r() != 0) {
    total_size += 1 + 8;
  }

  // optional bool color = 3;
  if (this->color() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void circleVal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:helloworld.circleVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const circleVal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const circleVal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:helloworld.circleVal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:helloworld.circleVal)
    MergeFrom(*source);
  }
}

void circleVal::MergeFrom(const circleVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:helloworld.circleVal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.center() != 0) {
    set_center(from.center());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void circleVal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:helloworld.circleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void circleVal::CopyFrom(const circleVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:helloworld.circleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool circleVal::IsInitialized() const {

  return true;
}

void circleVal::Swap(circleVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void circleVal::InternalSwap(circleVal* other) {
  std::swap(center_, other->center_);
  std::swap(r_, other->r_);
  std::swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata circleVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = circleVal_descriptor_;
  metadata.reflection = circleVal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// circleVal

// optional int32 center = 1;
void circleVal::clear_center() {
  center_ = 0;
}
 ::google::protobuf::int32 circleVal::center() const {
  // @@protoc_insertion_point(field_get:helloworld.circleVal.center)
  return center_;
}
 void circleVal::set_center(::google::protobuf::int32 value) {
  
  center_ = value;
  // @@protoc_insertion_point(field_set:helloworld.circleVal.center)
}

// optional double r = 2;
void circleVal::clear_r() {
  r_ = 0;
}
 double circleVal::r() const {
  // @@protoc_insertion_point(field_get:helloworld.circleVal.r)
  return r_;
}
 void circleVal::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:helloworld.circleVal.r)
}

// optional bool color = 3;
void circleVal::clear_color() {
  color_ = false;
}
 bool circleVal::color() const {
  // @@protoc_insertion_point(field_get:helloworld.circleVal.color)
  return color_;
}
 void circleVal::set_color(bool value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:helloworld.circleVal.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

// @@protoc_insertion_point(global_scope)
